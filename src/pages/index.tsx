import Head from 'next/head';
import Image from 'next/image';
import {Inter} from 'next/font/google';
import styles from '@/styles/Home.module.css';
import {useEffect, useRef, useState} from 'react';
import sendIcon from '../assets/send.svg';
import ChatBlock from '@/component/ChatBlock';
import Link from "next/link";

const inter = Inter({subsets: ['latin']});

export default function Home() {
    const [chatData, setChatData] = useState<{
        isAi: boolean;
        value: string;
        uniqueId: string;
    }[]>([]);
    const [inputValue, setInputValue] = useState<string>('');
    const [uniqueId, setUniqueId] = useState<string>('');
    const chatRef = useRef<HTMLDivElement>(null);

    let loadInterval: NodeJS.Timeout;

    const handleLoader = (element: HTMLElement) => {
        element.textContent = '';

        loadInterval = setInterval(() => {
            // Update the text content of the loading indicator
            element.textContent += '.';

            // If the loading indicator has reached three dots, reset it
            if (element.textContent === '....') {
                element.textContent = '';
            }
        }, 300);
    };

    const handleTypeResponse = (element: HTMLElement, text: string) => {
        let index = 0;

        let interval = setInterval(() => {
            if (index < text.length) {
                element.innerHTML += text.charAt(index);
                index++;
            } else {
                clearInterval(interval);
            }
        }, 20);
    };

    const handleUid = () => {
        const timestamp = Date.now();
        const randomNumber = Math.random();
        const hexadecimalString = randomNumber.toString(16);

        return `id-${timestamp}-${hexadecimalString}`;
    };

    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();

        const newChatMan = {
            isAi: false,
            value: inputValue,
            uniqueId: handleUid(),
        };

        // bot's chatstripe
        const uniqueId = handleUid();
        setUniqueId(uniqueId);

        const newChatBot = {
            isAi: true,
            value: '...',
            uniqueId,
        };

        setChatData([...chatData, newChatMan, newChatBot]);

        // to focus scroll to the bottom
        chatRef.current?.scrollTo({
            top: chatRef.current?.scrollHeight,
            behavior: 'smooth',
        });
    };

    useEffect(() => {
        const fetchChat = async () => {
            // specific message div
            const messageDiv = document.getElementById(uniqueId);

            if (!messageDiv) return;

            handleLoader(messageDiv);

            const response = await fetch('/api/chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    prompt: inputValue,
                }),
            });

            clearInterval(loadInterval);
            messageDiv.innerHTML = ' ';

            // to clear the textarea input
            setInputValue('');

            if (response.status === 200) {
                const data = await response.json();
                const parsedData = data?.bot.trim(); // trims any trailing spaces/'\n'

                handleTypeResponse(messageDiv, parsedData);
            } else {
                const err = await response.json();

                messageDiv.innerHTML = 'Something went wrong';
                alert(err);
            }
        };

        if (uniqueId) {
            fetchChat().then();
        }
    }, [chatData, uniqueId]);

    return (
        <>
            <Head>
                <title>ChatGPT API</title>
                <meta name="description" content="Generated by create next app"/>
                <meta name="viewport" content="width=device-width, initial-scale=1"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>
            <main className="
        flex flex-col items-center justify-between
        w-full h-screen bg-gradient-to-r from-blue-400 to-blue-600
        ">

                <div
                    className={`
                flex flex-col items-center justify-center
                w-full h-full overflow-y-auto p-4 gap-4
                `}
                    id="chat_container"
                    ref={chatRef}
                >
                    {
                        chatData.length === 0 &&
                        <div style={{
                            display: 'flex',
                            justifyContent: 'center',
                            alignItems: 'center',
                            height: '100%',
                            flexDirection: 'column',
                            color: '#fff',
                            gap: '1rem'
                        }}>
                            <h1 className={`
                            text-2xl font-bold text-center text-white
                            md:text-3xl lg:text-4xl xl:text-5xl md:leading-tight
                        `}>Hi, I'm a ChatGPT Clone built with ChatGPT API</h1>
                            <p className={`
                            text-lg text-center text-white md:text-xl
                        `}>Please set your own OpenAi API Key below to start chatting with me</p>
                            <div className={`
                            flex flex-col md:flex-row items-center justify-center
                            w-full gap-4 md:gap-0 md:justify-between md:items-center
                        `}>
                                <input className={`
                                w-10/12 px-4 py-2 text-lg text-gray-900 bg-white rounded-lg
                                focus:outline-none mr-3 mb-3 md:mb-0 md:mr-0 shadow-lg md:w-1/2
                                transition duration-300 ease-in-out hover:shadow-xl focus:shadow-xl hover:scale-105
                            `} type="text" name="api_key" id="api_key" placeholder="OpenAi API Key"/>
                                <button
                                    className={`
                                    w-2/12 px-4 py-2 text-lg text-blue-500 bg-white rounded-lg
                                    focus:outline-none shadow-lg md:w-1/2 font-bold hover:bg-blue-100
                                    transition duration-300 ease-in-out hover:shadow-xl focus:shadow-xl
                                `}
                                >Save
                                </button>
                            </div>
                            <p className={`
                            text-lg text-center text-white md:text-xl
                        `}>
                                OpenAi Model: <Link href="https://platform.openai.com/docs/models/gpt-3-5"
                                                    target="_blank"
                                                    rel="noreferrer"
                                                    className={`
                                                text-white hover:text-blue-300 transition duration-300 ease-in-out
                                                `}
                            >gpt-3.5-turbo</Link>
                            </p>
                        </div>
                    }
                    {
                        chatData.length > 0 && chatData?.map((item, index) =>
                            <ChatBlock key={index} isAi={item.isAi} value={item.value} uniqueId={item.uniqueId}/>
                        )
                    }
                </div>
                <form
                    onSubmit={handleSubmit}
                    onKeyDown={(e) => {
                        if (e.key === 'Enter') {
                            handleSubmit(e).then()
                        }
                    }}
                    className={`
                    flex items-center justify-between w-11/12 h-20 px-4 py-2
                    bg-white rounded-lg shadow-lg mb-3
                `}
                >
                <textarea
                    className={`
                        w-full px-4 py-2 text-lg text-gray-900 bg-white rounded-lg
                        focus:outline-none mr-3
                        transition-all duration-300 ease-in-out 
                    `}
                    name="prompt"
                    rows={1}
                    cols={1}
                    placeholder="Ask davinci..."
                    required
                    onChange={(e) => setInputValue(e.target.value)}
                    value={inputValue}
                ></textarea>
                    <button
                        className={`
                    w-12 h-12 bg-blue-400 rounded-xl shadow-lg
                    flex items-center justify-center
                    transition-all duration-300 ease-in-out
                    hover:bg-blue-500 focus:outline-none
                    
                  `}
                        type="submit"><Image src={sendIcon} alt="send" width={20} height={20}/></button>
                </form>
            </main>
        </>
    )
}
